version: '3'

services:
  app:
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        # [Choice] Python version: 3, 3.8, 3.7, 3.6
        VARIANT: 3.9
        # [Choice] Install Node.js
        INSTALL_NODE: "true"
        NODE_VERSION: "lts/*"
        # Please adapt to package name:
        PACKAGE_NAME: "my_custom_app"
        # On Linux, you may need to update USER_UID and USER_GID below if not your local UID is not 1000.
        USER_UID: 1000
        USER_GID: 1000

    init: true
    privileged: true

    volumes:
      - ..:/workspace:cached

    # Overrides default command so things don't shut down after the process ends.
    command: sleep infinity

    # Uncomment the next line to use a non-root user for all processes.
    user: vscode

    # define environment variables
    environment:
      # Please adapt to package name:
      MY_MICROSERVICE_CONFIG_YAML: /workspace/.devcontainer/.dev_config.yaml
      # Used by db migration:
      DB_URL: postgresql://postgres:postgres@postgresql/postgres
    # Use "forwardPorts" in **devcontainer.json** to forward an app port locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)


    # Please remove service dependencies that are not needed:
  mongodb:
    image: mongo:latest
    restart: unless-stopped
    volumes:
      - mongo_fs:/data/db

  localstack:
    image: localstack/localstack
    environment:
      SERVICES: s3
      DEFAULT_REGION: eu-west-1
      AWS_DEFAULT_REGION: eu-west-1
      # accessible at localhost
      HOSTNAME_EXTERNAL: localhost
      USE_SSL: "false"
      DATA_DIR: /var/lib/localstack/data
      DEBUG: 1
    volumes:
      - type: volume
        source: s3_fs
        target: /var/lib/localstack
        volume:
          nocopy: true
    # useful ports: 4566 - AWS API

  postgres:
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-server:7.5.1
    restart: always
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

volumes:
  s3_fs: {}
  mongo_fs: {}
  postgres_data: {}
